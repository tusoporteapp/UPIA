
if (window.innerWidth < 768) {
	[].slice.call(document.querySelectorAll('[data-bss-disabled-mobile]')).forEach(function (elem) {
		elem.classList.remove('animated');
		elem.removeAttribute('data-bss-hover-animate');
		elem.removeAttribute('data-aos');
		elem.removeAttribute('data-bss-parallax-bg');
		elem.removeAttribute('data-bss-scroll-zoom');
	});
}

document.addEventListener('DOMContentLoaded', function() {
	if ('AOS' in window) {
		AOS.init();
	}
}, false);
const CACHE_NAME = 'blogger-cache-v1';

async function fetchAndCachePosts() {
    try {
        const response = await fetch(`https://www.googleapis.com/blogger/v3/blogs/${blogId}/posts?key=${apiKey}&maxResults=${maxPosts}`);
        const data = await response.json();
        
        if (data.items) {
            localStorage.setItem(CACHE_NAME, JSON.stringify(data.items));
        }
        
        return data.items;
    } catch (error) {
        console.warn('No se pudo obtener datos en línea, cargando desde caché', error);
        return getCachedPosts();
    }
}

function getCachedPosts() {
    const cachedData = localStorage.getItem(CACHE_NAME);
    return cachedData ? JSON.parse(cachedData) : [];
}

async function updateCacheIfNeeded() {
    const cachedPosts = getCachedPosts();
    const latestPost = cachedPosts.length ? cachedPosts[0] : null;
    
    try {
        const response = await fetch(`https://www.googleapis.com/blogger/v3/blogs/${blogId}/posts?key=${apiKey}&maxResults=1`);
        const data = await response.json();
        
        if (data.items && (!latestPost || data.items[0].id !== latestPost.id)) {
            console.log('Nuevo contenido detectado, actualizando caché');
            fetchAndCachePosts();
        } else {
            console.log('El caché está actualizado.');
        }
    } catch (error) {
        console.warn('Error al verificar nuevas publicaciones.', error);
    }
}

async function loadPosts() {
    const posts = getCachedPosts();
    renderPosts(posts);
    await updateCacheIfNeeded();
}

document.addEventListener('DOMContentLoaded', loadPosts);

(function() {
  "use strict"; // Start of use strict

  function initParallax() {

    if (!('requestAnimationFrame' in window)) return;
    if (/Mobile|Android/.test(navigator.userAgent)) return;

    var parallaxItems = document.querySelectorAll('[data-bss-parallax]');

    if (!parallaxItems.length) return;

    var defaultSpeed = 0.5;
    var visible = [];
    var scheduled;

    window.addEventListener('scroll', scroll);
    window.addEventListener('resize', scroll);

    scroll();

    function scroll() {

      visible.length = 0;

      for (var i = 0; i < parallaxItems.length; i++) {
        var rect = parallaxItems[i].getBoundingClientRect();
        var speed = parseFloat(parallaxItems[i].getAttribute('data-bss-parallax-speed'), 10) || defaultSpeed;

        if (rect.bottom > 0 && rect.top < window.innerHeight) {
          visible.push({
            speed: speed,
            node: parallaxItems[i]
          });
        }

      }

      cancelAnimationFrame(scheduled);

      if (visible.length) {
        scheduled = requestAnimationFrame(update);
      }

    }

    function update() {

      for (var i = 0; i < visible.length; i++) {
        var node = visible[i].node;
        var speed = visible[i].speed;

        node.style.transform = 'translate3d(0, ' + (-window.scrollY * speed) + 'px, 0)';
      }

    }
  }

  initParallax();
})(); // End of use strict


const CACHE_NAME = 'site-cache-v1';
const OFFLINE_URL = '/offline.html'; // Crea una página offline.html personalizada si deseas

const ASSETS_TO_CACHE = [
    '/index.html', // Página principal
    '/offline.html', // Página offline personalizada
    '/javascript/blogger-api.js', // Scripts
    '/javascript/blogger-cache.js',
    '/javascript/bold-and-bright.js',
    '/service-worker.js',
    '/fonts/inter', // Fuentes
    '/images/products/', // Carpeta con imágenes
];

self.addEventListener('install', (event) => {
    event.waitUntil(
        caches.open(CACHE_NAME).then((cache) => {
            return cache.addAll(ASSETS_TO_CACHE);
        })
    );
    self.skipWaiting();
});

self.addEventListener('fetch', (event) => {
    event.respondWith(
        caches.match(event.request).then((cachedResponse) => {
            if (cachedResponse) {
                return cachedResponse;
            }
            return fetch(event.request).then((networkResponse) => {
                return caches.open(CACHE_NAME).then((cache) => {
                    cache.put(event.request, networkResponse.clone());
                    return networkResponse;
                });
            }).catch(() => caches.match(OFFLINE_URL));
        })
    );
});

self.addEventListener('activate', (event) => {
    event.waitUntil(
        caches.keys().then((cacheNames) => {
            return Promise.all(
                cacheNames.map((cache) => {
                    if (cache !== CACHE_NAME) {
                        return caches.delete(cache);
                    }
                })
            );
        })
    );
    self.clients.claim();
});
